import json
import numpy as np
import sys
import torch
from sentence_transformers import SentenceTransformer, util

# ----- 1. Load truy v·∫•n -----
if len(sys.argv) < 2:
    print("‚ö†Ô∏è Kh√¥ng c√≥ truy v·∫•n ƒë∆∞·ª£c truy·ªÅn t·ª´ Java.")
    sys.exit(1)

query = sys.argv[1]
print(f"üì• Truy v·∫•n t·ª´ ng∆∞·ªùi d√πng: {query}")

# ----- 2. Load d·ªØ li·ªáu -----
with open("src/main/java/resources/product_texts.json", "r", encoding="utf-8") as f:
    product_texts = json.load(f)

embeddings_np = np.load("src/main/java/resources/product_embeddings.npy")
embeddings = torch.tensor(embeddings_np, dtype=torch.float32)

# ----- 3. Nh√∫ng truy v·∫•n -----
model = SentenceTransformer("all-MiniLM-L6-v2")
query_embedding = model.encode(query, convert_to_tensor=True)

# ----- 4. T√≠nh t∆∞∆°ng ƒë·ªìng -----
scores = util.cos_sim(query_embedding, embeddings)[0]
scores_np = scores.cpu().numpy()

# ----- 5. L·ªçc & s·∫Øp x·∫øp -----
results = []
for idx, score in enumerate(scores_np):
    if score >= 0.3:  # ‚ö†Ô∏è Ng∆∞·ª°ng l·ªçc t∆∞∆°ng ƒë·ªìng
        product = product_texts[idx]
        product["score"] = round(float(score), 4)
        results.append(product)

# S·∫Øp x·∫øp gi·∫£m d·∫ßn theo ƒëi·ªÉm
results.sort(key=lambda x: x["score"], reverse=True)

# ----- 6. L∆∞u k·∫øt qu·∫£ -----
with open("src/main/java/resources/top_results.json", "w", encoding="utf-8") as f:
    json.dump(results, f, ensure_ascii=False, indent=2)

print(f"‚úÖ ƒê√£ l∆∞u {len(results)} k·∫øt qu·∫£ li√™n quan v√†o top_results.json")
